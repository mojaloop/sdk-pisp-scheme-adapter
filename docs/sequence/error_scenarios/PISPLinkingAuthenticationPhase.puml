@startuml

title PISP Linking Error Scenarios Authentication Phase

participant "PISP Backend" as PISP
box "PISP tp-scheme-adapter"
  participant "outbound-server" as PISP_TP_OUT
  participant "PISPLinkingModel" as PISP_LM
  participant "inbound-server" as PISP_TP_IN
end box
box "Mojaloop"
    participant Switch
    participant "Auth Service" as AUTH
    participant "Account Lookup Service" as ALS
end box
box "DFSP tp-scheme-adapter"
  participant "inbound-server" as DFSP_TP_IN
  participant "DFSPLinkingModel" as DFSP_LM
end box

== Authentication ==
autonumber 1 "<b>AUTHENTICATION-#</b>"
rnote right of PISP
PISP has obtained authToken from end-user(OTP) or through a callback(Web).
end note
PISP -> PISP_TP_OUT: POST /linking/request-consent/6789/authenticate
rnote right of PISP #LightBlue
POST /linking/request-consent/6789/authenticate
{
  authToken: '123456'
}
end note

activate PISP
activate PISP_TP_OUT

PISP_TP_OUT -> PISP_TP_OUT: const model = await loadFromKVS({key: 6789})
rnote right of PISP_TP_OUT: state: webAuthenticationChannelResponseRecieved or OTPAuthenticationChannelResponseRecieved
PISP_TP_OUT -> PISP_LM: model.authenticate()

activate PISP_LM

PISP_LM -> PISP_LM: ThirdpartyRequests.patchConsentRequests()
PISP_LM -> Switch: PATCH /consentRequests/6789
rnote right of PISP_LM #LightBlue
PATCH /consentRequests/6789
FSIOP-Source: pispa
FSIOP-Destination: dfspa
{
  authToken: '124356'
}
end note

activate Switch
Switch --> PISP_LM: 202 Accepted
deactivate PISP_LM
Switch -> DFSP_TP_IN: PATCH /consentRequests/6789
activate DFSP_TP_IN
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
DFSP_TP_IN -> DFSP_TP_IN: const model = await loadFromKVS({key: 6789})
rnote right of DFSP_TP_IN: state: consentRequestValidatedAndStored
DFSP_TP_IN -> DFSP_LM: model.validateAuthToken()
deactivate DFSP_TP_IN
activate DFSP_LM

DFSP_LM -> DFSP_LM: DFSPBackendRequests.validateAuthToken()
rnote right of DFSP_LM #LightBlue
Do we need two backend endpoints for validating
web authTokens and OTP authTokens? Or is a DFSP expected to
validate both cases with one endpoint?

POST /validateAuthToken
{
  consentRequestId: '6789'
  authChannel: model.data.authChannel,
  authToken: '124356'
}
end note
rnote right of DFSP_LM: state: authTokenValidated

DFSP_LM -> DFSP_LM: const consentId = uuid()
DFSP_LM -> DFSP_LM: model.grantConsent()
DFSP_LM -> DFSP_LM: ThirdpartyRequests.postConsents()
rnote right of DFSP_LM: state: consentGranted
rnote right of DFSP_LM #LightBlue
It's important to save the model with the consentId from this point onwards!
Requests will not contain a consentRequestId in the upcoming requests.
This may require changing `PersistentModel` to have a secondary key it can
store the model with.
end note
DFSP_LM -> DFSP_LM: this.saveToKVS({key: '1a2b3c4d'})

DFSP_LM -> Switch: POST /consents
@enduml
