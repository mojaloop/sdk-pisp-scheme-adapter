@startuml

title PISP Linking OTP

participant "PISP Backend" as PISP
box "PISP tp-scheme-adapter"
  participant "outbound-server" as PISP_TP_OUT
  participant "PISPLinkingModel" as PISP_LM
  participant "inbound-server" as PISP_TP_IN
end box
box "Mojaloop"
    participant Switch
    participant "Auth Service" as AUTH
    participant "Account Lookup Service" as ALS
end box
box "DFSP tp-scheme-adapter"
  participant "inbound-server" as DFSP_TP_IN
  participant "DFSPLinkingModel" as DFSP_LM
end box
participant DFSPAuthorizeSimulator

== Request Consent - OTP ==
autonumber 1 "<b>REQUEST-CONSENT-#</b>"
rnote right of PISP
PISP presents accounts to user. User selects one or more accounts to link.
end note
PISP -> PISP_TP_OUT: POST /linking/request-consent
rnote right of PISP #LightBlue
POST /linking/request-consent
{
  accounts: [
    { accountNickname: "XXXXXXnt", id: "dfspa.username.1234", currency: "ZAR" },
    { accountNickname: "SpeXXXXXXXXnt", id: "dfspa.username.5678", currency: "USD" }
  ],
  userId: "username1234", // so the dfsp can associate this request with GET /accounts
  callbackURI: 'pisp-app://callback'
}
end note

activate PISP
activate PISP_TP_OUT

PISP_TP_OUT -> PISP_TP_OUT: const model = await create()
rnote right of PISP_TP_OUT: state: start
PISP_TP_OUT -> PISP_LM: model.requestConsent()
activate PISP_LM

PISP_LM -> PISP_LM: ThirdpartyRequests.postConsentRequests()
PISP_LM -> PISP_LM: const consentRequestId = uuid()
PISP_LM -> Switch: POST /consentRequests
rnote right of PISP_LM #LightBlue
POST /consentRequests
FSIOP-Source: pispa
FSIOP-Destination: dfspa
{
  consentRequestId: 6789
  userId: "username1234"
  scopes: [{
    accountId: 'dfspa.username.1234',
    actions: ['accounts.getBalance', 'accounts.transfer'],
    accountId: 'dfspa.username.5678',
    actions: ['accounts.getBalance', 'accounts.transfer'],
  }],
  // model will add `authChannels`
  authChannels: ["WEB", "OTP"],
  callbackURI: 'pisp-app://callback...'
}
end note

activate Switch
Switch --> PISP_LM: 202 Accepted
deactivate PISP_LM
Switch -> DFSP_TP_IN: POST /consentRequests
activate DFSP_TP_IN
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
DFSP_TP_IN -> DFSP_TP_IN: const model = await create()
rnote right of DFSP_TP_IN: state: start
DFSP_TP_IN -> DFSP_LM: model.requestConsent()
deactivate DFSP_TP_IN
activate DFSP_LM
DFSP_LM -> DFSP_LM: DFSPBackendRequests.validateConsentRequest()
DFSP_LM -> DFSPAuthorizeSimulator: POST /sendOTP
activate DFSPAuthorizeSimulator
rnote right of DFSP_LM #LightBlue
POST /sendOTP
{
  consentRequestId: 6789,
  username: "username.1234",
  message: "0987"
}
end note
DFSPAuthorizeSimulator -> DFSPAuthorizeSimulator: take action on TTK for defined rule for username
DFSPAuthorizeSimulator -> DFSP_LM: 200 OK
rnote right of DFSP_LM: state: consentRequestValidatedAndStored
deactivate DFSPAuthorizeSimulator
deactivate DFSP_TP_IN

DFSP_LM -> Switch: PUT /consentRequests/6789
activate Switch

rnote left of DFSP_LM #LightBlue
PUT /consentRequests/6789
FSIOP-Source: pispa
FSIOP-Destination: dfspa
{
  consentRequestId: 6789
  scopes: [{
    accountId: 'dfspa.username.1234',
    actions: ['accounts.getBalance', 'accounts.transfer'],
    accountId: 'dfspa.username.5678',
    actions: ['accounts.getBalance', 'accounts.transfer'],
  }],
  authChannels: ["OTP"], // updated with the channel in use
  callbackURI: 'pisp-app://callback...',
  // note: no authURI for OTP flow
}
end note
Switch --> DFSP_LM: 202 ACCEPTED
deactivate DFSP_LM

Switch ->  PISP_TP_IN: PUT /consentRequests/6789
activate PISP_TP_IN
PISP_TP_IN --> Switch: 200 OK
deactivate Switch
activate PISP_LM
PISP_TP_IN --> PISP_LM: Consent Request response recieved
deactivate PISP_TP_IN
rnote right of PISP_LM: state: OTPAuthenticationChannelResponseRecieved
PISP_LM --> PISP_LM: this.saveToKVS()
PISP_LM -> PISP_TP_OUT: return Authentication Response
deactivate PISP_LM
PISP_TP_OUT --> PISP: 200 OK Authentication Response
rnote left of PISP_TP_OUT #LightBlue
{
  channelResponse: {
    consentRequestId: 6789
    scopes: [{
      accountId: 'dfspa.username.1234',
      actions: ['accounts.getBalance', 'accounts.transfer'],
      accountId: 'dfspa.username.5678',
      actions: ['accounts.getBalance', 'accounts.transfer'],
    }],
    authChannels: ["OTP"],
    callbackURI: 'pisp-app://callback...',
    authURI: 'dfspa.com/authorize?consentRequestId=6789' // this is new
  },
  currentState="OTPAuthenticationChannelResponseRecieved"
}
end note

deactivate PISP_TP_OUT
deactivate PISP

note over PISP, DFSPAuthorizeSimulator
  The DFSP is expected to send an OTP to the end user which will be used in the next linking step.
end note

== Authentication+Grant Consent+Register Credential ==
autonumber 1 "<b>AUTHENTICATION-#</b>"
rnote right of PISP
PISP has obtained authToken from end-user(OTP) or through a callback(Web).
end note
PISP -> PISP_TP_OUT: POST /linking/request-consent/6789/authenticate
rnote right of PISP #LightBlue
POST /linking/request-consent/6789/authenticate
{
  authToken: '123456'
}
end note

activate PISP
activate PISP_TP_OUT

PISP_TP_OUT -> PISP_TP_OUT: const model = await loadFromKVS({key: 6789})
rnote right of PISP_TP_OUT: state: webAuthenticationChannelResponseRecieved or OTPAuthenticationChannelResponseRecieved
PISP_TP_OUT -> PISP_LM: model.authenticate()

activate PISP_LM

PISP_LM -> PISP_LM: ThirdpartyRequests.patchConsentRequests()
PISP_LM -> Switch: PATCH /consentRequests/6789
rnote right of PISP_LM #LightBlue
PATCH /consentRequests/6789
FSIOP-Source: pispa
FSIOP-Destination: dfspa
{
  authToken: '124356'
}
end note

activate Switch
Switch --> PISP_LM: 202 Accepted
deactivate PISP_LM
Switch -> DFSP_TP_IN: PATCH /consentRequests/6789
activate DFSP_TP_IN
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
DFSP_TP_IN -> DFSP_TP_IN: const model = await loadFromKVS({key: 6789})
rnote right of DFSP_TP_IN: state: consentRequestValidatedAndStored
DFSP_TP_IN -> DFSP_LM: model.validateAuthToken()
deactivate DFSP_TP_IN
activate DFSP_LM

DFSP_LM -> DFSP_LM: DFSPBackendRequests.validateAuthToken()
rnote right of DFSP_LM #LightBlue
Do we need two backend endpoints for validating
web authTokens and OTP authTokens? Or is a DFSP expected to
validate both cases with one endpoint?

POST /validateAuthToken
{
  consentRequestId: '6789'
  authChannel: model.data.authChannel,
  authToken: '124356'
}

For now we will just use one endpoint.
The DFSP should be able to infer the method based on the consentRequestId.
end note
rnote right of DFSP_LM: state: authTokenValidated

DFSP_LM -> DFSP_LM: const consentId = uuid()
DFSP_LM -> DFSP_LM: model.grantConsent()
DFSP_LM -> DFSP_LM: ThirdpartyRequests.postConsents()
rnote right of DFSP_LM: state: consentGranted
rnote right of DFSP_LM #LightBlue
It's important to save the model with the consentId from this point onwards!
Requests will not contain a consentRequestId in the upcoming requests.
This may require changing `PersistentModel` to have a secondary key it can
store the model with.
end note
DFSP_LM -> DFSP_LM: this.saveToKVS({key: '1a2b3c4d'})

DFSP_LM -> Switch: POST /consents
activate Switch

rnote left of DFSP_LM #LightBlue
POST /consents
FSIOP-Source: dfspa
FSIOP-Destination: pispa
{
  consentId: 1a2b3c4d
  consentRequestId: 6789
  scopes: model.data.scopes
}
end note
Switch --> DFSP_LM: 202 ACCEPTED
deactivate DFSP_LM
Switch ->  PISP_TP_IN: POST /consents
activate PISP_TP_IN
PISP_TP_IN -> PISP_TP_IN: const model = await loadFromKVS({key: 6789})
PISP_TP_IN -> PISP_LM: model.registerCredential()
activate PISP_LM
PISP_TP_IN --> Switch: 202 Accepted
deactivate PISP_TP_IN
deactivate Switch
rnote right of PISP_LM: state: consentRecieved
rnote right of PISP_LM #LightBlue
It's important to save the model with the consentId from this point onwards!
Requests will not contain a consentRequestId in the upcoming requests.
This may require changing `PersistentModel` to have a secondary key it can
store the model with.
end note
PISP_LM --> PISP_LM: const challenge = deriveChallenge(consentRequest)
PISP_LM --> PISP_LM: this.saveToKVS({key: '1a2b3c4d'})

PISP_LM -> PISP_LM: ThirdpartyRequests.putConsents()
rnote right of PISP_LM: state: signedConsentSent
PISP_LM -> Switch: PUT /consents/1a2b3c4d
activate Switch

rnote right of PISP_LM #LightBlue
PUT /consents/1a2b3c4d
FSIOP-Source: pispa
FSIOP-Destination: dfspa
{
  scopes: [{
    accountId: 'dfspa.username.1234',
    actions: ['accounts.getBalance', 'accounts.transfer'],
    accountId: 'dfspa.username.5678',
    actions: ['accounts.getBalance', 'accounts.transfer'],
  }],
  credential: {
    credentialType: "FIDO",
    status: "PENDING",
    payload: PublicKeyCredential
  }
}
end note

Switch --> PISP_LM: 202 Accepted
deactivate PISP_LM
Switch -> DFSP_TP_IN: PUT /consents/1a2b3c4d
activate DFSP_TP_IN

DFSP_TP_IN -> DFSP_TP_IN: const model = await loadFromKVS({key: 1a2b3c4d})
rnote right of DFSP_TP_IN: state: signedConsentReceived
DFSP_TP_IN -> DFSP_LM: model.validateSignedConsent()
activate DFSP_LM
rnote right of DFSP_TP_IN: state: pendingRegistrationAndValidation
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
deactivate DFSP_TP_IN
DFSP_LM -> DFSP_LM: Check signed consent.
rnote right of DFSP_LM #LightBlue
Does this need a backend request or can the scheme adapter check the consent.

Yes and No. We're keeping it as this for now (default to just talking to the
auth service), but ideally we would open up a config option that would allow a
DFSP to specify whether or not the DFSP Backend should receive a callback
asking them to validate the credential before proceeding.
end note
rnote right of DFSP_LM: state: signedConsentChecked
DFSP_LM-> DFSP_LM: model.validateWithAuthService()
DFSP_LM -> Switch: POST /consents/1a2b3c4d
activate Switch

rnote left of DFSP_LM #LightBlue
POST /consents/1a2b3c4d
FSIOP-Source: dfspa
FSIOP-Destination: central-auth
{
  scopes: [{
    accountId: 'dfspa.username.1234',
    actions: ['accounts.getBalance', 'accounts.transfer'],
    accountId: 'dfspa.username.5678',
    actions: ['accounts.getBalance', 'accounts.transfer'],
  }],
  credential: {
    credentialType: "FIDO",
    status: "PENDING",
    payload: PublicKeyCredential
  }
}
end note
Switch --> DFSP_LM: 202 Accepted
DFSP_LM -> DFSP_LM: this.saveToKVS()
deactivate DFSP_LM

Switch -> AUTH: POST /consents/1a2b3c4d
activate AUTH
AUTH --> Switch: 202 Accepted
AUTH -> AUTH: Check consent.
AUTH -> Switch: PUT /consents/1a2b3c4d

rnote left of AUTH #LightBlue
PUT /consents/1a2b3c4d
FSIOP-Source: central-auth
FSIOP-Destination: dfspa
{
  scopes: [{
    accountId: 'dfspa.username.1234',
    actions: ['accounts.getBalance', 'accounts.transfer'],
    accountId: 'dfspa.username.5678',
    actions: ['accounts.getBalance', 'accounts.transfer'],
  }],
  credential: {
    credentialType: "FIDO",
    status: "VERIFIED",
    payload: PublicKeyCredential
  }
}
end note

Switch --> AUTH: 200 OK
Switch -> DFSP_TP_IN: PUT /consents/1a2b3c4d
activate DFSP_TP_IN
DFSP_TP_IN -> DFSP_TP_IN: const model = await loadFromKVS({key: 1a2b3c4d})
DFSP_TP_IN -> DFSP_TP_IN: consentResponseRecieved()
rnote right of DFSP_TP_IN: state: consentResponseRecieved
DFSP_TP_IN -> DFSP_LM: Auth Service response recieved
activate DFSP_LM
DFSP_TP_IN --> Switch: 200 OK
deactivate Switch
deactivate DFSP_TP_IN

AUTH -> ALS: POST /participants/CONSENTS/1a2b3c4d
activate ALS
ALS --> AUTH: 202 Accepted
deactivate AUTH

ALS -> DFSP_TP_IN: PUT /participants/CONSENTS/1a2b3c4d
activate DFSP_TP_IN
DFSP_TP_IN -> DFSP_TP_IN: const model = await loadFromKVS({key: 1a2b3c4d})
DFSP_TP_IN -> DFSP_TP_IN: participantResponseRecieved()
rnote right of DFSP_TP_IN: state: participantsResponseRecieved
DFSP_TP_IN -> DFSP_LM: Participant response recieved
DFSP_TP_IN --> ALS: 200 Accepted
deactivate ALS
deactivate DFSP_TP_IN
rnote right of DFSP_LM: state: consentRegisteredAndValidated
DFSP_LM -> DFSP_LM: model.finalizeConsent()

loop for each scope in ""Consents.scopes""
DFSP_LM -> Switch: POST /participants/THIRD_PARTY_LINK/dfsp.username.5678
Switch --> DFSP_LM: 202 Accepted
Switch -> ALS: POST /participants/THIRD_PARTY_LINK/dfsp.username.5678
ALS --> Switch: 202 Accepted
ALS -> Switch: PUT /participants/THIRD_PARTY_LINK/dfsp.username.5678
Switch --> ALS: 200 OK
Switch -> DFSP_TP_IN: PUT /participants/THIRD_PARTY_LINK/dfsp.username.5678
DFSP_TP_IN --> Switch: 200 OK
DFSP_TP_IN -> DFSP_LM: Participant response recieved
end

DFSP_LM -> DFSP_LM: await Promise.all()
DFSP_LM -> DFSP_LM: state: PISPDFSPLinkEstablished
DFSP_LM -> DFSP_LM: model.notifyVerificationToPISP()
DFSP_LM -> Switch: PATCH /consents/1a2b3c4d
rnote left of DFSP_LM #LightBlue
PATCH /consents/1a2b3c4d
FSIOP-Source: dfspa
FSIOP-Destination: pispa
{
  credential: {
    status: "VERIFIED"
  }
}
end note
activate Switch
Switch --> DFSP_LM: 200 OK
deactivate DFSP_LM
Switch -> PISP_TP_IN: PATCH /consents/1a2b3c4d
activate PISP_TP_IN
PISP_TP_IN -> PISP_TP_IN: const model = await loadFromKVS({key: 1a2b3c4d})

PISP_TP_IN -> PISP_LM: Verified Response recieved
activate PISP_LM
PISP_TP_IN --> Switch: 200 OK
deactivate PISP_TP_IN
deactivate Switch
rnote right of PISP_LM: state: accountsLinked
PISP_LM --> PISP_TP_OUT: return Accounts linked response
deactivate PISP_LM
PISP_TP_OUT --> PISP: 200 OK Accounts Linked
rnote left of PISP_TP_OUT #LightBlue
{
  credential: {
    status: "VERIFIED"
  }
  currentState="accountsLinked"
}
end note
@enduml
