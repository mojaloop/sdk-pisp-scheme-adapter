openapi: 3.0.1
info:
  title: Thirdparty Outbound Scheme Adapter
  version: 0.1.0
  description: Thirdparty Outbound Scheme Adapter
  license:
    name: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)
servers:
  - url: /
paths:
  /authorizations:
    post:
      operationId: OutboundAuthorizationsPost
      summary: Outbound Authorizations endpoint
      description: DFSP Requests Authorization of Transaction from the End User
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest'
      responses:
        '200':
          $ref: '#/components/responses/OutboundAuthorizationsPostResponse'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
  /health:
    get:
      tags:
        - health
      responses:
        '200':
          $ref: '#/paths/~1hello/get/responses/200'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
      operationId: HealthGet
      summary: Get Server
      description: The HTTP request GET /health is used to return the current status of the API.
  /metrics:
    get:
      tags:
        - metrics
      responses:
        '200':
          $ref: '#/paths/~1hello/get/responses/200'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /hello:
    get:
      tags:
        - metrics
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties:
                      errorCode:
                        title: ErrorCode
                        type: string
                        pattern: '^[1-9]\d{3}$'
                        description: |
                          The API data type ErrorCode is a JSON String of four characters,
                          consisting of digits only. Negative numbers are not allowed.
                          A leading zero is not allowed. Each error code in the API is a
                          four-digit number, for example, 1234, where the first number
                          (1 in the example) represents the high-level error category,
                          the second number (2 in the example) represents the low-level error category,
                          and the last two numbers (34 in the example) represent the specific error.
                        example: 5100
                      errorDescription:
                        title: ErrorDescription
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Error description string.
                        example: This is an error description.
                      extensionList:
                        $ref: '#/paths/~1authorizations/post/requestBody/content/application~1json/schema/properties/quote/properties/extensionList'
                    required:
                      - errorCode
                      - errorDescription
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |
                The `Content-Length` header field indicates the anticipated
                size of the payload body. Only sent if there is a body.
                **Note:** The API supports a maximum size of 5242880 bytes
                (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1hello/get/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1hello/get/responses/400/headers/Content-Type'
      operationId: HelloGet
      summary: example get
      description: The HTTP request GET /hello is used to return some example json.
  '/thirdpartyRequests/transactions/{ID}/authorizations':
    post:
      operationId: VerifyThirdPartyAuthorization
      summary: VerifyThirdPartyAuthorization
      description: |
        The HTTP request `POST /thirdpartyRequests/transactions/{id}/authorizations` is used by the DFSP to verify a third party authorization.
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: string
          description: The identifier value.
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyThirdPartyAuthorizationRequest'
            example:
              challenge: <QuoteResponse object>
              value: <base64 encoded binary - the signed quote response object>
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
              sourceAccountId: dfspa.alice.1234
              status: PENDING
      responses:
        '200':
          $ref: '#/components/responses/ThirdPartyAuthorizationResponse'
        '400':
          $ref: '#/paths/~1hello/get/responses/400'
        '401':
          $ref: '#/paths/~1hello/get/responses/401'
        '403':
          $ref: '#/paths/~1hello/get/responses/403'
        '404':
          $ref: '#/paths/~1hello/get/responses/404'
        '405':
          $ref: '#/paths/~1hello/get/responses/405'
        '406':
          $ref: '#/paths/~1hello/get/responses/406'
        '501':
          $ref: '#/paths/~1hello/get/responses/501'
        '503':
          $ref: '#/paths/~1hello/get/responses/503'
components:
  schemas:
    AuthorizationsState:
      title: AuthorizationsState
      description: state of POST authorizations
      type: string
      enum:
        - WAITING_FOR_AUTHORIZATION_REQUEST
        - COMPLETED
        - ERROR_OCCURRED
    AuthorizationResponse:
      title: AuthorizationResponse
      description: |
        Enum containing response information; if the customer entered the
        authentication value, rejected the transaction, or requested a
        resend of the authentication value.
      type: string
      enum:
        - ENTERED
        - REJECTED
        - RESEND
    AuthenticationType:
      title: AuthenticationType
      type: string
      enum:
        - OTP
        - QRCODE
        - U2F
      description: |
        Below are the allowed values for the enumeration AuthenticationType.
        - OTP - One-time password generated by the Payer FSP.
        - QRCODE - QR code used as One Time Password.
        - U2F
      example: UTF
    OutboundAuthorizationsPostRequest:
      title: authorizationsRequest
      description: POST /authorizations Request object
      type: object
      properties:
        toParticipantId:
          type: string
        authenticationType:
          $ref: '#/components/schemas/AuthenticationType'
        retriesLeft:
          title: Integer
          type: string
          pattern: '^[1-9]\d*$'
          description: |
            The API data type Integer is a JSON String consisting of digits only.
            Negative numbers and leading zeroes are not allowed.
            The data type is always limited to a specific number of digits.
        amount:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties:
            currency:
              title: Currency
              description: |
                The currency codes defined in
                [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)
                as three-letter alphabetic codes are used as the standard naming representation for currencies.
              type: string
              minLength: 3
              maxLength: 3
              enum:
                - AED
                - AFN
                - ALL
                - AMD
                - ANG
                - AOA
                - ARS
                - AUD
                - AWG
                - AZN
                - BAM
                - BBD
                - BDT
                - BGN
                - BHD
                - BIF
                - BMD
                - BND
                - BOB
                - BRL
                - BSD
                - BTN
                - BWP
                - BYN
                - BZD
                - CAD
                - CDF
                - CHF
                - CLP
                - CNY
                - COP
                - CRC
                - CUC
                - CUP
                - CVE
                - CZK
                - DJF
                - DKK
                - DOP
                - DZD
                - EGP
                - ERN
                - ETB
                - EUR
                - FJD
                - FKP
                - GBP
                - GEL
                - GGP
                - GHS
                - GIP
                - GMD
                - GNF
                - GTQ
                - GYD
                - HKD
                - HNL
                - HRK
                - HTG
                - HUF
                - IDR
                - ILS
                - IMP
                - INR
                - IQD
                - IRR
                - ISK
                - JEP
                - JMD
                - JOD
                - JPY
                - KES
                - KGS
                - KHR
                - KMF
                - KPW
                - KRW
                - KWD
                - KYD
                - KZT
                - LAK
                - LBP
                - LKR
                - LRD
                - LSL
                - LYD
                - MAD
                - MDL
                - MGA
                - MKD
                - MMK
                - MNT
                - MOP
                - MRO
                - MUR
                - MVR
                - MWK
                - MXN
                - MYR
                - MZN
                - NAD
                - NGN
                - NIO
                - NOK
                - NPR
                - NZD
                - OMR
                - PAB
                - PEN
                - PGK
                - PHP
                - PKR
                - PLN
                - PYG
                - QAR
                - RON
                - RSD
                - RUB
                - RWF
                - SAR
                - SBD
                - SCR
                - SDG
                - SEK
                - SGD
                - SHP
                - SLL
                - SOS
                - SPL
                - SRD
                - STD
                - SVC
                - SYP
                - SZL
                - THB
                - TJS
                - TMT
                - TND
                - TOP
                - TRY
                - TTD
                - TVD
                - TWD
                - TZS
                - UAH
                - UGX
                - USD
                - UYU
                - UZS
                - VEF
                - VND
                - VUV
                - WST
                - XAF
                - XCD
                - XDR
                - XOF
                - XPF
                - YER
                - ZAR
                - ZMW
                - ZWD
              example: USD
            amount:
              title: Amount
              type: string
              pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
              description: |
                The API data type Amount is a JSON String in a canonical format that is
                restricted by a regular expression for interoperability reasons.
                This pattern does not allow any trailing zeroes at all, but allows an amount
                without a minor currency unit. It also only allows four digits in the minor
                currency unit; a negative value is not allowed. Using more than 18 digits
                in the major currency unit is not allowed.
              example: 123.45
          required:
            - currency
            - amount
        transactionId:
          title: CorrelationId
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
          description: |
            Identifier that correlates all messages of the same sequence.
            The API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122),
            that is restricted by a regular expression for interoperability reasons.
            A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        transactionRequestId:
          $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/transactionId'
        quote:
          title: QuotesIDPutResponse
          type: object
          description: 'The object sent in the PUT /quotes/{ID} callback.'
          properties:
            transferAmount:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            payeeReceiveAmount:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            payeeFspFee:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            payeeFspCommission:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            expiration:
              title: DateTime
              type: string
              pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$'
              description: |
                The API data type DateTime is a JSON String in a lexical format that is
                restricted by a regular expression for interoperability reasons.
                The format is according to
                [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                expressed in a combined date, time and time zone format.
                A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
                Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\"
                (where Z indicates Zulu time zone, same as UTC).
              example: '2016-05-24T08:38:08.699-04:00'
            geoCode:
              title: GeoCode
              type: object
              description: |
                Data model for the complex type GeoCode.
                Indicates the geographic location from where the transaction was initiated.
              properties:
                latitude:
                  title: Latitude
                  type: string
                  pattern: '^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$'
                  description: |
                    The API data type Latitude is a JSON String in a lexical format that is
                    restricted by a regular expression for interoperability reasons.
                  example: '+45.4215'
                longitude:
                  title: Longitude
                  type: string
                  pattern: '^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$'
                  description: |
                    The API data type Longitude is a JSON String in a lexical format that
                    is restricted by a regular expression for interoperability reasons.
                  example: '+75.6972'
              required:
                - latitude
                - longitude
            ilpPacket:
              title: IlpPacket
              type: string
              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
              minLength: 1
              maxLength: 32768
              description: Information for recipient (transport layer information).
              example: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
            condition:
              title: IlpCondition
              type: string
              pattern: '^[A-Za-z0-9-_]{43}$'
              maxLength: 48
              description: Condition that must be attached to the transfer by the Payer.
              example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
            extensionList:
              title: ExtensionList
              type: object
              description: |
                Data model for the complex type ExtensionList.
                An optional list of extensions, specific to deployment.
              properties:
                extension:
                  type: array
                  items:
                    title: Extension
                    type: object
                    description: Data model for the complex type Extension.
                    properties:
                      key:
                        title: ExtensionKey
                        type: string
                        minLength: 1
                        maxLength: 32
                        description: Extension key.
                      value:
                        title: ExtensionValue
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Extension value.
                    required:
                      - key
                      - value
                  minItems: 1
                  maxItems: 16
                  description: Number of Extension elements.
              required:
                - extension
          required:
            - transferAmount
            - expiration
            - ilpPacket
            - condition
      required:
        - authenticationType
        - retriesLeft
        - amount
        - transactionId
        - transactionRequestId
        - quote
      additionalProperties: false
    AccountId:
      type: string
      description: |
        A long-lived account identifier provided by the DFSP this MUST NOT be Bank Account Number or anything that may expose a User's private bank account information
    ThirdPartyAuthorizationsState:
      title: ThirdPartyAuthorizationsState
      description: Transition state of thirdparty authorizations
      type: string
      enum:
        - WAITING_FOR_AUTHORIZATION_REQUEST
        - COMPLETED
        - ERROR_OCCURRED
    VerifyThirdPartyAuthorizationRequest:
      title: VerifyThirdPartyAuthorizationRequest
      type: object
      description: 'The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request.'
      properties:
        toParticipantId:
          type: string
          description: 'The id of the destination participant, in this case, a DFSP'
        challenge:
          type: string
          description: The original Challenge Object as a JSON string
        value:
          allOf:
            - $ref: '#/components/schemas/ThirdPartyAuthorizationResponse/properties/value/allOf/0'
          description: Base64 encoded binary string - the signed challenge
        consentId:
          allOf:
            - $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/transactionId'
          description: |
            Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
        sourceAccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        status:
          type: string
          enum:
            - PENDING
          description: The status of the authorization. This MUST be PENDING for a POST request
      required:
        - challenge
        - value
        - consentId
        - sourceAccountId
        - status
    ThirdPartyAuthorizationResponse:
      title: ThirdPartyAuthorizationResponse
      type: object
      description: 'The response for POST /thirdpartyRequests/transactions/{id}/authorizations request.'
      properties:
        challenge:
          type: string
          description: The original Challenge Object as a JSON string
        value:
          allOf:
            - type: string
              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
              description: |
                The API data type BinaryString is a JSON String.
                The string is a base64url  encoding of a string of raw bytes,
                where padding (character ‘=’) is added at the end of the data if
                needed to ensure that the string is a multiple of 4 characters.
                The length restriction indicates the allowed number of characters.
          description: Base64 encoded binary string - the signed challenge
        consentId:
          allOf:
            - $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/transactionId'
          description: |
            Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
        sourceAccountId:
          allOf:
            - $ref: '#/components/schemas/AccountId'
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        status:
          type: string
          enum:
            - VERIFIED
          description: The status of the authorization.
        currentState:
          $ref: '#/components/schemas/ThirdPartyAuthorizationsState'
      required:
        - challenge
        - value
        - consentId
        - sourceAccountId
        - status
  responses:
    OutboundAuthorizationsPostResponse:
      description: |
        response body of POST/authorizations 
        derived from AuthorizationsIDPutResponse by Inbound Service via Pub/Sub channel
      content:
        application/json:
          schema:
            title: OutboundAuthorizationsPostResponse
            type: object
            required:
              - responseType
            additionalProperties: false
            properties:
              authenticationInfo:
                title: AuthenticationInfo
                type: object
                description: Data model for the complex type AuthenticationInfo.
                properties:
                  authentication:
                    title: AuthenticationType
                    type: string
                    enum:
                      - OTP
                      - QRCODE
                    description: |
                      Below are the allowed values for the enumeration AuthenticationType.
                      - OTP - One-time password generated by the Payer FSP.
                      - QRCODE - QR code used as One Time Password.
                    example: OTP
                  authenticationValue:
                    title: AuthenticationValue
                    oneOf:
                      - title: OtpValue
                        type: string
                        pattern: '^\d{3,10}$'
                        description: |
                          The API data type OtpValue is a JSON String of 3 to 10 characters,
                          consisting of digits only. Negative numbers are not allowed.
                          One or more leading zeros are allowed.
                      - title: QRCODE
                        type: string
                        minLength: 1
                        maxLength: 64
                        description: QR code used as a One Time Password.
                    pattern: '^\d{3,10}$|^\S{1,64}$'
                    description: |
                      Contains the authentication value. The format depends on the authentication
                      type used in the AuthenticationInfo complex type.
                    example: 1234
                required:
                  - authentication
                  - authenticationValue
              responseType:
                title: AuthorizationResponse
                type: string
                enum:
                  - ENTERED
                  - REJECTED
                  - RESEND
                description: |
                  Below are the allowed values for the enumeration.
                  - ENTERED - Consumer entered the authentication value.
                  - REJECTED - Consumer rejected the transaction.
                  - RESEND - Consumer requested to resend the authentication value.
                example: ENTERED
              currentState:
                $ref: '#/components/schemas/AuthorizationsState'
    ThirdPartyAuthorizationResponse:
      description: ThirdPartyAuthorizationResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThirdPartyAuthorizationResponse'
